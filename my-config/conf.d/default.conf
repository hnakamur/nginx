lua_package_path '/usr/lib/nginx/lua/?.lua;;';

map $host $host_group {
    default            1;
    www1.example.com   2;
}

map $request_method $method_group {
    default            B;
    GET                A;
    HEAD               A;
    OPTIONS            A;
}

map $host_group-$method_group $limit_conn_by_host_conn {
    default       unlimited;
    1-A           unlimited;
    1-B           50;
    2-A           20;
    2-B            2;
}

map $host_group $limit_conn_by_host_status {
    default       429;
    2             444;
}

map $host_group-$method_group $limit_req_by_host_rate {
    default       10000r/s;
    1-A           10000r/s;
    1-B            1000r/s;
    2-A             500r/s;
    2-B              50r/s;
}

map $host_group-$method_group $limit_req_by_host_burst {
    default        2000;
    1-A            2000;
    1-B             200;
    2-A             100;
    2-B              10;
}

map $host_group $limit_req_by_host_status {
    default       429;
    2             444;
}

var_limit_conn_zone $host-$method_group zone=limit_conn_by_host_zone:10m conn_var=$limit_conn_by_host_conn status_var=$limit_conn_by_host_status;
var_limit_req_zone $host-$method_group zone=limit_req_by_host_zone:10m rate_var=$limit_req_by_host_rate burst_var=$limit_req_by_host_burst status_var=$limit_req_by_host_status;

server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    var_limit_conn_log_level info;

    root /var/www/html/;

    location / {
        index  index.html index.htm;
    }

    location /limit-mem {
        content_by_lua_block {
            ngx.req.read_body()
            local body = string.format("hello by lua, host=%s\n", ngx.var.host)
            ngx.header.content_type = 'text/plain'
            ngx.header.content_length = #body
            ngx.print(body)
        }
    }

    location /limit-conn-req {
        var_limit_conn limit_conn_by_host_zone 10;
        var_limit_conn_status 429;
        var_limit_req zone=limit_req_by_host_zone nodelay;
        var_limit_req_status 429;

        content_by_lua_block {
            ngx.req.read_body()
            local body = string.format("this is /limit-conn-req, host=%s\n", ngx.var.host)
            ngx.header.content_type = 'text/plain'
            ngx.header.content_length = #body
            ngx.print(body)
        }
    }

    location /limit-conn {
        var_limit_conn limit_conn_by_host_zone 10;
        var_limit_conn_status 429;

        content_by_lua_block {
            ngx.req.read_body()
            local body = string.format("this is /limit-conn, host=%s\n", ngx.var.host)
            ngx.header.content_type = 'text/plain'
            ngx.header.content_length = #body
            ngx.print(body)
        }
    }

    location /top-limit-conn {
        var_limit_conn_top limit_conn_by_host_zone default_n=3;
    }

    location /status-limit-conn {
        var_limit_conn_monitor limit_conn_by_host_zone;
    }

    location /limit-req {
        var_limit_req zone=limit_req_by_host_zone nodelay;
        var_limit_req_status 429;

        content_by_lua_block {
            ngx.req.read_body()
            local body = string.format("this is /limit-req, host=%s\n", ngx.var.host)
            ngx.header.content_type = 'text/plain'
            ngx.header.content_length = #body
            ngx.print(body)
        }
    }

    location /top-limit-req {
        var_limit_req_top limit_req_by_host_zone default_n=5;
    }

    location /status-limit-req {
        var_limit_req_monitor limit_req_by_host_zone;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

